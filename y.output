State 7 conflicts: 1 shift/reduce
State 15 conflicts: 4 shift/reduce, 3 reduce/reduce
State 18 conflicts: 1 shift/reduce
State 20 conflicts: 5 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: prog $end

    1 prog: headers word '(' ')' block

    2 headers: headers headers
    3        | INCLUDE

    4 vtype: INT
    5      | CHAR
    6      | /* empty */

    7 word: vtype WORD

    8 block: '{' decls slist '}'
    9      | /* empty */

   10 decls: decls decl
   11      | /* empty */

   12 slist: slist stat
   13      | stat

   14 decl: vtype word ';'

   15 stat: IF '(' cond ')' block ELSE '{' block '}'
   16     | word '=' expr ';'
   17     | RETURN expr ';'
   18     | /* empty */

   19 cond: expr L expr

   20 expr: expr ADD fact
   21     | expr MULTIPLY fact
   22     | fact

   23 fact: NUM
   24     | WORD


Terminals, with rules where they appear

$end (0) 0
'(' (40) 1 15
')' (41) 1 15
';' (59) 14 16 17
'=' (61) 16
'{' (123) 8 15
'}' (125) 8 15
error (256)
IF (258) 15
ELSE (259) 15
INT (260) 4
CHAR (261) 5
L (262) 19
ADD (263) 20
MULTIPLY (264) 21
WORD (265) 7 24
NUM (266) 23
RETURN (267) 17
INCLUDE (268) 3


Nonterminals, with rules where they appear

$accept (20)
    on left: 0
prog (21)
    on left: 1, on right: 0
headers (22)
    on left: 2 3, on right: 1 2
vtype (23)
    on left: 4 5 6, on right: 7 14
word (24)
    on left: 7, on right: 1 14 16
block (25)
    on left: 8 9, on right: 1 15
decls (26)
    on left: 10 11, on right: 8 10
slist (27)
    on left: 12 13, on right: 8 12
decl (28)
    on left: 14, on right: 10
stat (29)
    on left: 15 16 17 18, on right: 12 13
cond (30)
    on left: 19, on right: 15
expr (31)
    on left: 20 21 22, on right: 16 17 19 20 21
fact (32)
    on left: 23 24, on right: 20 21 22


state 0

    0 $accept: . prog $end

    INCLUDE  shift, and go to state 1

    prog     go to state 2
    headers  go to state 3


state 1

    3 headers: INCLUDE .

    $default  reduce using rule 3 (headers)


state 2

    0 $accept: prog . $end

    $end  shift, and go to state 4


state 3

    1 prog: headers . word '(' ')' block
    2 headers: headers . headers

    INT      shift, and go to state 5
    CHAR     shift, and go to state 6
    INCLUDE  shift, and go to state 1

    $default  reduce using rule 6 (vtype)

    headers  go to state 7
    vtype    go to state 8
    word     go to state 9


state 4

    0 $accept: prog $end .

    $default  accept


state 5

    4 vtype: INT .

    $default  reduce using rule 4 (vtype)


state 6

    5 vtype: CHAR .

    $default  reduce using rule 5 (vtype)


state 7

    2 headers: headers . headers
    2        | headers headers .

    INCLUDE  shift, and go to state 1

    INCLUDE   [reduce using rule 2 (headers)]
    $default  reduce using rule 2 (headers)

    headers  go to state 7


state 8

    7 word: vtype . WORD

    WORD  shift, and go to state 10


state 9

    1 prog: headers word . '(' ')' block

    '('  shift, and go to state 11


state 10

    7 word: vtype WORD .

    $default  reduce using rule 7 (word)


state 11

    1 prog: headers word '(' . ')' block

    ')'  shift, and go to state 12


state 12

    1 prog: headers word '(' ')' . block

    '{'  shift, and go to state 13

    $default  reduce using rule 9 (block)

    block  go to state 14


state 13

    8 block: '{' . decls slist '}'

    $default  reduce using rule 11 (decls)

    decls  go to state 15


state 14

    1 prog: headers word '(' ')' block .

    $default  reduce using rule 1 (prog)


state 15

    8 block: '{' decls . slist '}'
   10 decls: decls . decl

    IF      shift, and go to state 16
    INT     shift, and go to state 5
    CHAR    shift, and go to state 6
    RETURN  shift, and go to state 17

    IF        [reduce using rule 18 (stat)]
    INT       [reduce using rule 6 (vtype)]
    INT       [reduce using rule 18 (stat)]
    CHAR      [reduce using rule 6 (vtype)]
    CHAR      [reduce using rule 18 (stat)]
    WORD      reduce using rule 6 (vtype)
    WORD      [reduce using rule 18 (stat)]
    RETURN    [reduce using rule 18 (stat)]
    '}'       reduce using rule 18 (stat)
    $default  reduce using rule 6 (vtype)

    vtype  go to state 18
    word   go to state 19
    slist  go to state 20
    decl   go to state 21
    stat   go to state 22


state 16

   15 stat: IF . '(' cond ')' block ELSE '{' block '}'

    '('  shift, and go to state 23


state 17

   17 stat: RETURN . expr ';'

    WORD  shift, and go to state 24
    NUM   shift, and go to state 25

    expr  go to state 26
    fact  go to state 27


state 18

    7 word: vtype . WORD
   14 decl: vtype . word ';'

    INT   shift, and go to state 5
    CHAR  shift, and go to state 6
    WORD  shift, and go to state 10

    WORD  [reduce using rule 6 (vtype)]

    vtype  go to state 8
    word   go to state 28


state 19

   16 stat: word . '=' expr ';'

    '='  shift, and go to state 29


state 20

    8 block: '{' decls slist . '}'
   12 slist: slist . stat

    IF      shift, and go to state 16
    INT     shift, and go to state 5
    CHAR    shift, and go to state 6
    RETURN  shift, and go to state 17
    '}'     shift, and go to state 30

    IF        [reduce using rule 18 (stat)]
    INT       [reduce using rule 18 (stat)]
    CHAR      [reduce using rule 18 (stat)]
    WORD      reduce using rule 6 (vtype)
    WORD      [reduce using rule 18 (stat)]
    RETURN    [reduce using rule 18 (stat)]
    '}'       [reduce using rule 18 (stat)]
    $default  reduce using rule 6 (vtype)

    vtype  go to state 8
    word   go to state 19
    stat   go to state 31


state 21

   10 decls: decls decl .

    $default  reduce using rule 10 (decls)


state 22

   13 slist: stat .

    $default  reduce using rule 13 (slist)


state 23

   15 stat: IF '(' . cond ')' block ELSE '{' block '}'

    WORD  shift, and go to state 24
    NUM   shift, and go to state 25

    cond  go to state 32
    expr  go to state 33
    fact  go to state 27


state 24

   24 fact: WORD .

    $default  reduce using rule 24 (fact)


state 25

   23 fact: NUM .

    $default  reduce using rule 23 (fact)


state 26

   17 stat: RETURN expr . ';'
   20 expr: expr . ADD fact
   21     | expr . MULTIPLY fact

    ADD       shift, and go to state 34
    MULTIPLY  shift, and go to state 35
    ';'       shift, and go to state 36


state 27

   22 expr: fact .

    $default  reduce using rule 22 (expr)


state 28

   14 decl: vtype word . ';'

    ';'  shift, and go to state 37


state 29

   16 stat: word '=' . expr ';'

    WORD  shift, and go to state 24
    NUM   shift, and go to state 25

    expr  go to state 38
    fact  go to state 27


state 30

    8 block: '{' decls slist '}' .

    $default  reduce using rule 8 (block)


state 31

   12 slist: slist stat .

    $default  reduce using rule 12 (slist)


state 32

   15 stat: IF '(' cond . ')' block ELSE '{' block '}'

    ')'  shift, and go to state 39


state 33

   19 cond: expr . L expr
   20 expr: expr . ADD fact
   21     | expr . MULTIPLY fact

    L         shift, and go to state 40
    ADD       shift, and go to state 34
    MULTIPLY  shift, and go to state 35


state 34

   20 expr: expr ADD . fact

    WORD  shift, and go to state 24
    NUM   shift, and go to state 25

    fact  go to state 41


state 35

   21 expr: expr MULTIPLY . fact

    WORD  shift, and go to state 24
    NUM   shift, and go to state 25

    fact  go to state 42


state 36

   17 stat: RETURN expr ';' .

    $default  reduce using rule 17 (stat)


state 37

   14 decl: vtype word ';' .

    $default  reduce using rule 14 (decl)


state 38

   16 stat: word '=' expr . ';'
   20 expr: expr . ADD fact
   21     | expr . MULTIPLY fact

    ADD       shift, and go to state 34
    MULTIPLY  shift, and go to state 35
    ';'       shift, and go to state 43


state 39

   15 stat: IF '(' cond ')' . block ELSE '{' block '}'

    '{'  shift, and go to state 13

    $default  reduce using rule 9 (block)

    block  go to state 44


state 40

   19 cond: expr L . expr

    WORD  shift, and go to state 24
    NUM   shift, and go to state 25

    expr  go to state 45
    fact  go to state 27


state 41

   20 expr: expr ADD fact .

    $default  reduce using rule 20 (expr)


state 42

   21 expr: expr MULTIPLY fact .

    $default  reduce using rule 21 (expr)


state 43

   16 stat: word '=' expr ';' .

    $default  reduce using rule 16 (stat)


state 44

   15 stat: IF '(' cond ')' block . ELSE '{' block '}'

    ELSE  shift, and go to state 46


state 45

   19 cond: expr L expr .
   20 expr: expr . ADD fact
   21     | expr . MULTIPLY fact

    ADD       shift, and go to state 34
    MULTIPLY  shift, and go to state 35

    $default  reduce using rule 19 (cond)


state 46

   15 stat: IF '(' cond ')' block ELSE . '{' block '}'

    '{'  shift, and go to state 47


state 47

   15 stat: IF '(' cond ')' block ELSE '{' . block '}'

    '{'  shift, and go to state 13

    $default  reduce using rule 9 (block)

    block  go to state 48


state 48

   15 stat: IF '(' cond ')' block ELSE '{' block . '}'

    '}'  shift, and go to state 49


state 49

   15 stat: IF '(' cond ')' block ELSE '{' block '}' .

    $default  reduce using rule 15 (stat)
