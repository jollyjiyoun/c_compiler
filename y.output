State 7 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: headers word '(' ')' block

    2 headers: headers headers
    3        | INCLUDE

    4 vtype: INT
    5      | CHAR

    6 word: vtype WORD

    7 block: '{' decls slist '}'
    8      | /* empty */

    9 decls: decls decl
   10      | /* empty */

   11 slist: slist stat
   12      | stat

   13 decl: vtype word ';'

   14 stat: IF '(' cond ')' block ELSE block
   15     | WORD '=' expr ';'
   16     | RETURN expr ';'

   17 cond: expr L expr

   18 expr: expr ADD fact
   19     | expr MULTIPLY fact
   20     | fact

   21 fact: NUM
   22     | WORD


Terminals, with rules where they appear

$end (0) 0
'(' (40) 1 14
')' (41) 1 14
';' (59) 13 15 16
'=' (61) 15
'{' (123) 7
'}' (125) 7
error (256)
IF (258) 14
ELSE (259) 14
INT (260) 4
CHAR (261) 5
L (262) 17
ADD (263) 18
MULTIPLY (264) 19
WORD (265) 6 15 22
NUM (266) 21
RETURN (267) 16
INCLUDE (268) 3


Nonterminals, with rules where they appear

$accept (20)
    on left: 0
prog (21)
    on left: 1, on right: 0
headers (22)
    on left: 2 3, on right: 1 2
vtype (23)
    on left: 4 5, on right: 6 13
word (24)
    on left: 6, on right: 1 13
block (25)
    on left: 7 8, on right: 1 14
decls (26)
    on left: 9 10, on right: 7 9
slist (27)
    on left: 11 12, on right: 7 11
decl (28)
    on left: 13, on right: 9
stat (29)
    on left: 14 15 16, on right: 11 12
cond (30)
    on left: 17, on right: 14
expr (31)
    on left: 18 19 20, on right: 15 16 17 18 19
fact (32)
    on left: 21 22, on right: 18 19 20


state 0

    0 $accept: . prog $end

    INCLUDE  shift, and go to state 1

    prog     go to state 2
    headers  go to state 3


state 1

    3 headers: INCLUDE .

    $default  reduce using rule 3 (headers)


state 2

    0 $accept: prog . $end

    $end  shift, and go to state 4


state 3

    1 prog: headers . word '(' ')' block
    2 headers: headers . headers

    INT      shift, and go to state 5
    CHAR     shift, and go to state 6
    INCLUDE  shift, and go to state 1

    headers  go to state 7
    vtype    go to state 8
    word     go to state 9


state 4

    0 $accept: prog $end .

    $default  accept


state 5

    4 vtype: INT .

    $default  reduce using rule 4 (vtype)


state 6

    5 vtype: CHAR .

    $default  reduce using rule 5 (vtype)


state 7

    2 headers: headers . headers
    2        | headers headers .

    INCLUDE  shift, and go to state 1

    INCLUDE   [reduce using rule 2 (headers)]
    $default  reduce using rule 2 (headers)

    headers  go to state 7


state 8

    6 word: vtype . WORD

    WORD  shift, and go to state 10


state 9

    1 prog: headers word . '(' ')' block

    '('  shift, and go to state 11


state 10

    6 word: vtype WORD .

    $default  reduce using rule 6 (word)


state 11

    1 prog: headers word '(' . ')' block

    ')'  shift, and go to state 12


state 12

    1 prog: headers word '(' ')' . block

    '{'  shift, and go to state 13

    $default  reduce using rule 8 (block)

    block  go to state 14


state 13

    7 block: '{' . decls slist '}'

    $default  reduce using rule 10 (decls)

    decls  go to state 15


state 14

    1 prog: headers word '(' ')' block .

    $default  reduce using rule 1 (prog)


state 15

    7 block: '{' decls . slist '}'
    9 decls: decls . decl

    IF      shift, and go to state 16
    INT     shift, and go to state 5
    CHAR    shift, and go to state 6
    WORD    shift, and go to state 17
    RETURN  shift, and go to state 18

    vtype  go to state 19
    slist  go to state 20
    decl   go to state 21
    stat   go to state 22


state 16

   14 stat: IF . '(' cond ')' block ELSE block

    '('  shift, and go to state 23


state 17

   15 stat: WORD . '=' expr ';'

    '='  shift, and go to state 24


state 18

   16 stat: RETURN . expr ';'

    WORD  shift, and go to state 25
    NUM   shift, and go to state 26

    expr  go to state 27
    fact  go to state 28


state 19

   13 decl: vtype . word ';'

    INT   shift, and go to state 5
    CHAR  shift, and go to state 6

    vtype  go to state 8
    word   go to state 29


state 20

    7 block: '{' decls slist . '}'
   11 slist: slist . stat

    IF      shift, and go to state 16
    WORD    shift, and go to state 17
    RETURN  shift, and go to state 18
    '}'     shift, and go to state 30

    stat  go to state 31


state 21

    9 decls: decls decl .

    $default  reduce using rule 9 (decls)


state 22

   12 slist: stat .

    $default  reduce using rule 12 (slist)


state 23

   14 stat: IF '(' . cond ')' block ELSE block

    WORD  shift, and go to state 25
    NUM   shift, and go to state 26

    cond  go to state 32
    expr  go to state 33
    fact  go to state 28


state 24

   15 stat: WORD '=' . expr ';'

    WORD  shift, and go to state 25
    NUM   shift, and go to state 26

    expr  go to state 34
    fact  go to state 28


state 25

   22 fact: WORD .

    $default  reduce using rule 22 (fact)


state 26

   21 fact: NUM .

    $default  reduce using rule 21 (fact)


state 27

   16 stat: RETURN expr . ';'
   18 expr: expr . ADD fact
   19     | expr . MULTIPLY fact

    ADD       shift, and go to state 35
    MULTIPLY  shift, and go to state 36
    ';'       shift, and go to state 37


state 28

   20 expr: fact .

    $default  reduce using rule 20 (expr)


state 29

   13 decl: vtype word . ';'

    ';'  shift, and go to state 38


state 30

    7 block: '{' decls slist '}' .

    $default  reduce using rule 7 (block)


state 31

   11 slist: slist stat .

    $default  reduce using rule 11 (slist)


state 32

   14 stat: IF '(' cond . ')' block ELSE block

    ')'  shift, and go to state 39


state 33

   17 cond: expr . L expr
   18 expr: expr . ADD fact
   19     | expr . MULTIPLY fact

    L         shift, and go to state 40
    ADD       shift, and go to state 35
    MULTIPLY  shift, and go to state 36


state 34

   15 stat: WORD '=' expr . ';'
   18 expr: expr . ADD fact
   19     | expr . MULTIPLY fact

    ADD       shift, and go to state 35
    MULTIPLY  shift, and go to state 36
    ';'       shift, and go to state 41


state 35

   18 expr: expr ADD . fact

    WORD  shift, and go to state 25
    NUM   shift, and go to state 26

    fact  go to state 42


state 36

   19 expr: expr MULTIPLY . fact

    WORD  shift, and go to state 25
    NUM   shift, and go to state 26

    fact  go to state 43


state 37

   16 stat: RETURN expr ';' .

    $default  reduce using rule 16 (stat)


state 38

   13 decl: vtype word ';' .

    $default  reduce using rule 13 (decl)


state 39

   14 stat: IF '(' cond ')' . block ELSE block

    '{'  shift, and go to state 13

    $default  reduce using rule 8 (block)

    block  go to state 44


state 40

   17 cond: expr L . expr

    WORD  shift, and go to state 25
    NUM   shift, and go to state 26

    expr  go to state 45
    fact  go to state 28


state 41

   15 stat: WORD '=' expr ';' .

    $default  reduce using rule 15 (stat)


state 42

   18 expr: expr ADD fact .

    $default  reduce using rule 18 (expr)


state 43

   19 expr: expr MULTIPLY fact .

    $default  reduce using rule 19 (expr)


state 44

   14 stat: IF '(' cond ')' block . ELSE block

    ELSE  shift, and go to state 46


state 45

   17 cond: expr L expr .
   18 expr: expr . ADD fact
   19     | expr . MULTIPLY fact

    ADD       shift, and go to state 35
    MULTIPLY  shift, and go to state 36

    $default  reduce using rule 17 (cond)


state 46

   14 stat: IF '(' cond ')' block ELSE . block

    '{'  shift, and go to state 13

    $default  reduce using rule 8 (block)

    block  go to state 47


state 47

   14 stat: IF '(' cond ')' block ELSE block .

    $default  reduce using rule 14 (stat)
